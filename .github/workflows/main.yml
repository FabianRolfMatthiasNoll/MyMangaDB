name: Build MyMangaDB

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm install
          if ("${{ runner.os }}" -eq 'Windows') {
            $env:CI="false"
            npm run build:ci:win
          } else {
            npm run build:ci:other
          }
        shell: pwsh
        env:
          CI: false

      - name: Set PyInstaller Data Delimiter for Windows
        id: set_delimiter
        run: |
          echo "::set-output name=delimiter::;"
        if: runner.os == 'Windows'

      - name: Set PyInstaller Data Delimiter for Others
        id: set_delimiter
        run: |
          echo "::set-output name=delimiter:::"
        if: runner.os != 'Windows'


      - name: Print PYINSTALLER_DELIMITER
        run: 'echo "Delimiter is: ${{ steps.set_delimiter.outputs.delimiter }}"'
        shell: pwsh
        
      - name: Build with PyInstaller
        run: |
          $dataPath = "./frontend/build" + ${{ steps.set_delimiter.outputs.delimiter }} + "build"
          pyinstaller main.py --onefile --noconsole --add-data=$dataPath --name MyMangaDB
        shell: pwsh
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-build
          path: ./dist/*
