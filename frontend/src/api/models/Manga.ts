/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
} from './Author';
import type { CollectionStatus } from './CollectionStatus';
import {
    CollectionStatusFromJSON,
    CollectionStatusFromJSONTyped,
    CollectionStatusToJSON,
} from './CollectionStatus';
import type { Genre } from './Genre';
import {
    GenreFromJSON,
    GenreFromJSONTyped,
    GenreToJSON,
} from './Genre';
import type { ReadingStatus } from './ReadingStatus';
import {
    ReadingStatusFromJSON,
    ReadingStatusFromJSONTyped,
    ReadingStatusToJSON,
} from './ReadingStatus';
import type { Volume } from './Volume';
import {
    VolumeFromJSON,
    VolumeFromJSONTyped,
    VolumeToJSON,
} from './Volume';

/**
 * 
 * @export
 * @interface Manga
 */
export interface Manga {
    /**
     * 
     * @type {number}
     * @memberof Manga
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Manga
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Manga
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof Manga
     */
    totalVolumes: number;
    /**
     * 
     * @type {Array<Volume>}
     * @memberof Manga
     */
    volumes: Array<Volume>;
    /**
     * 
     * @type {Array<Author>}
     * @memberof Manga
     */
    authors: Array<Author>;
    /**
     * 
     * @type {Array<Genre>}
     * @memberof Manga
     */
    genres: Array<Genre>;
    /**
     * 
     * @type {string}
     * @memberof Manga
     */
    coverImage: string;
    /**
     * 
     * @type {ReadingStatus}
     * @memberof Manga
     */
    readingStatus: ReadingStatus;
    /**
     * 
     * @type {CollectionStatus}
     * @memberof Manga
     */
    collectionStatus: CollectionStatus;
}

/**
 * Check if a given object implements the Manga interface.
 */
export function instanceOfManga(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "totalVolumes" in value;
    isInstance = isInstance && "volumes" in value;
    isInstance = isInstance && "authors" in value;
    isInstance = isInstance && "genres" in value;
    isInstance = isInstance && "coverImage" in value;
    isInstance = isInstance && "readingStatus" in value;
    isInstance = isInstance && "collectionStatus" in value;

    return isInstance;
}

export function MangaFromJSON(json: any): Manga {
    return MangaFromJSONTyped(json, false);
}

export function MangaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Manga {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'totalVolumes': json['total_volumes'],
        'volumes': ((json['volumes'] as Array<any>).map(VolumeFromJSON)),
        'authors': ((json['authors'] as Array<any>).map(AuthorFromJSON)),
        'genres': ((json['genres'] as Array<any>).map(GenreFromJSON)),
        'coverImage': json['cover_image'],
        'readingStatus': ReadingStatusFromJSON(json['reading_status']),
        'collectionStatus': CollectionStatusFromJSON(json['collection_status']),
    };
}

export function MangaToJSON(value?: Manga | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'description': value.description,
        'total_volumes': value.totalVolumes,
        'volumes': ((value.volumes as Array<any>).map(VolumeToJSON)),
        'authors': ((value.authors as Array<any>).map(AuthorToJSON)),
        'genres': ((value.genres as Array<any>).map(GenreToJSON)),
        'cover_image': value.coverImage,
        'reading_status': ReadingStatusToJSON(value.readingStatus),
        'collection_status': CollectionStatusToJSON(value.collectionStatus),
    };
}

