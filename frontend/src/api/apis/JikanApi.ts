/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Manga,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MangaFromJSON,
    MangaToJSON,
} from '../models';

export interface GetMangasWithJikanJikanSearchMangaTitleGetRequest {
    mangaTitle: string;
}

export interface UpdateMangaWithJikanJikanUpdatePutRequest {
    manga: Manga;
}

/**
 * 
 */
export class JikanApi extends runtime.BaseAPI {

    /**
     * Get Mangas With Jikan
     */
    async getMangasWithJikanJikanSearchMangaTitleGetRaw(requestParameters: GetMangasWithJikanJikanSearchMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        if (requestParameters.mangaTitle === null || requestParameters.mangaTitle === undefined) {
            throw new runtime.RequiredError('mangaTitle','Required parameter requestParameters.mangaTitle was null or undefined when calling getMangasWithJikanJikanSearchMangaTitleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jikan/search/{manga_title}`.replace(`{${"manga_title"}}`, encodeURIComponent(String(requestParameters.mangaTitle))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get Mangas With Jikan
     */
    async getMangasWithJikanJikanSearchMangaTitleGet(requestParameters: GetMangasWithJikanJikanSearchMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getMangasWithJikanJikanSearchMangaTitleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Manga With Jikan
     */
    async updateMangaWithJikanJikanUpdatePutRaw(requestParameters: UpdateMangaWithJikanJikanUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.manga === null || requestParameters.manga === undefined) {
            throw new runtime.RequiredError('manga','Required parameter requestParameters.manga was null or undefined when calling updateMangaWithJikanJikanUpdatePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jikan/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MangaToJSON(requestParameters.manga),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Update Manga With Jikan
     */
    async updateMangaWithJikanJikanUpdatePut(requestParameters: UpdateMangaWithJikanJikanUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.updateMangaWithJikanJikanUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
