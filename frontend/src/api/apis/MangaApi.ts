/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Manga,
  Volume,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MangaFromJSON,
    MangaToJSON,
    VolumeFromJSON,
    VolumeToJSON,
} from '../models';

export interface AddVolumeMangaAddVolPostRequest {
    volume: Volume;
}

export interface CreateMangaMangaPostRequest {
    manga: Manga;
}

export interface GetMangaByIdMangaIdMangaIdGetRequest {
    mangaId: number;
}

export interface GetMangaByTitleMangaTitleMangaTitleGetRequest {
    mangaTitle: string;
}

export interface GetMangasByAuthorMangaAuthorAuthorNameGetRequest {
    authorName: string;
}

export interface GetMangasByGenreMangaGenreGenreNameGetRequest {
    genreName: string;
}

export interface RemoveMangaMangaRemoveDeleteRequest {
    mangaId: number;
}

export interface RemoveVolumeMangaDelVolDeleteRequest {
    volumeId: number;
}

export interface UpdateMangaMangaUpdateMangaPutRequest {
    manga: Manga;
}

/**
 * 
 */
export class MangaApi extends runtime.BaseAPI {

    /**
     * Add Volume
     */
    async addVolumeMangaAddVolPostRaw(requestParameters: AddVolumeMangaAddVolPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.volume === null || requestParameters.volume === undefined) {
            throw new runtime.RequiredError('volume','Required parameter requestParameters.volume was null or undefined when calling addVolumeMangaAddVolPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manga/add_vol`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolumeToJSON(requestParameters.volume),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Add Volume
     */
    async addVolumeMangaAddVolPost(requestParameters: AddVolumeMangaAddVolPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.addVolumeMangaAddVolPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Manga
     */
    async createMangaMangaPostRaw(requestParameters: CreateMangaMangaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.manga === null || requestParameters.manga === undefined) {
            throw new runtime.RequiredError('manga','Required parameter requestParameters.manga was null or undefined when calling createMangaMangaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manga/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MangaToJSON(requestParameters.manga),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Create Manga
     */
    async createMangaMangaPost(requestParameters: CreateMangaMangaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.createMangaMangaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Mangas
     */
    async getAllMangasMangaGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get All Mangas
     */
    async getAllMangasMangaGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getAllMangasMangaGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Manga By Id
     */
    async getMangaByIdMangaIdMangaIdGetRaw(requestParameters: GetMangaByIdMangaIdMangaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaId === null || requestParameters.mangaId === undefined) {
            throw new runtime.RequiredError('mangaId','Required parameter requestParameters.mangaId was null or undefined when calling getMangaByIdMangaIdMangaIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/id/{manga_id}`.replace(`{${"manga_id"}}`, encodeURIComponent(String(requestParameters.mangaId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Get Manga By Id
     */
    async getMangaByIdMangaIdMangaIdGet(requestParameters: GetMangaByIdMangaIdMangaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.getMangaByIdMangaIdMangaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Manga By Title
     */
    async getMangaByTitleMangaTitleMangaTitleGetRaw(requestParameters: GetMangaByTitleMangaTitleMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaTitle === null || requestParameters.mangaTitle === undefined) {
            throw new runtime.RequiredError('mangaTitle','Required parameter requestParameters.mangaTitle was null or undefined when calling getMangaByTitleMangaTitleMangaTitleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/title/{manga_title}`.replace(`{${"manga_title"}}`, encodeURIComponent(String(requestParameters.mangaTitle))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Get Manga By Title
     */
    async getMangaByTitleMangaTitleMangaTitleGet(requestParameters: GetMangaByTitleMangaTitleMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.getMangaByTitleMangaTitleMangaTitleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mangas By Author
     */
    async getMangasByAuthorMangaAuthorAuthorNameGetRaw(requestParameters: GetMangasByAuthorMangaAuthorAuthorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        if (requestParameters.authorName === null || requestParameters.authorName === undefined) {
            throw new runtime.RequiredError('authorName','Required parameter requestParameters.authorName was null or undefined when calling getMangasByAuthorMangaAuthorAuthorNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/author/{author_name}`.replace(`{${"author_name"}}`, encodeURIComponent(String(requestParameters.authorName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get Mangas By Author
     */
    async getMangasByAuthorMangaAuthorAuthorNameGet(requestParameters: GetMangasByAuthorMangaAuthorAuthorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getMangasByAuthorMangaAuthorAuthorNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mangas By Genre
     */
    async getMangasByGenreMangaGenreGenreNameGetRaw(requestParameters: GetMangasByGenreMangaGenreGenreNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        if (requestParameters.genreName === null || requestParameters.genreName === undefined) {
            throw new runtime.RequiredError('genreName','Required parameter requestParameters.genreName was null or undefined when calling getMangasByGenreMangaGenreGenreNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/genre/{genre_name}`.replace(`{${"genre_name"}}`, encodeURIComponent(String(requestParameters.genreName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get Mangas By Genre
     */
    async getMangasByGenreMangaGenreGenreNameGet(requestParameters: GetMangasByGenreMangaGenreGenreNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getMangasByGenreMangaGenreGenreNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Manga
     */
    async removeMangaMangaRemoveDeleteRaw(requestParameters: RemoveMangaMangaRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.mangaId === null || requestParameters.mangaId === undefined) {
            throw new runtime.RequiredError('mangaId','Required parameter requestParameters.mangaId was null or undefined when calling removeMangaMangaRemoveDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.mangaId !== undefined) {
            queryParameters['manga_id'] = requestParameters.mangaId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/remove`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove Manga
     */
    async removeMangaMangaRemoveDelete(requestParameters: RemoveMangaMangaRemoveDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeMangaMangaRemoveDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Volume
     */
    async removeVolumeMangaDelVolDeleteRaw(requestParameters: RemoveVolumeMangaDelVolDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.volumeId === null || requestParameters.volumeId === undefined) {
            throw new runtime.RequiredError('volumeId','Required parameter requestParameters.volumeId was null or undefined when calling removeVolumeMangaDelVolDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.volumeId !== undefined) {
            queryParameters['volume_id'] = requestParameters.volumeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/del_vol`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Remove Volume
     */
    async removeVolumeMangaDelVolDelete(requestParameters: RemoveVolumeMangaDelVolDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeVolumeMangaDelVolDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Manga
     */
    async updateMangaMangaUpdateMangaPutRaw(requestParameters: UpdateMangaMangaUpdateMangaPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.manga === null || requestParameters.manga === undefined) {
            throw new runtime.RequiredError('manga','Required parameter requestParameters.manga was null or undefined when calling updateMangaMangaUpdateMangaPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manga/update_manga`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MangaToJSON(requestParameters.manga),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Update Manga
     */
    async updateMangaMangaUpdateMangaPut(requestParameters: UpdateMangaMangaUpdateMangaPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.updateMangaMangaUpdateMangaPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
