/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Manga,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MangaFromJSON,
    MangaToJSON,
} from '../models';

export interface AddVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPutRequest {
    mangaId: number;
    volumeNum: number;
}

export interface AddVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPutRequest {
    mangaTitle: string;
    volumeNum: number;
}

export interface CreateMangaMangaPostRequest {
    manga: Manga;
}

export interface GetMangaByIdMangaIdMangaIdGetRequest {
    mangaId: number;
}

export interface GetMangaByTitleMangaTitleMangaTitleGetRequest {
    mangaTitle: string;
}

export interface GetMangasByAuthorMangaAuthorAuthorNameGetRequest {
    authorName: string;
}

export interface GetMangasByGenresMangaGenreGenreNameGetRequest {
    genreName: string;
}

/**
 * 
 */
export class MangaApi extends runtime.BaseAPI {

    /**
     * Add Volume To Manga By Id
     */
    async addVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPutRaw(requestParameters: AddVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaId === null || requestParameters.mangaId === undefined) {
            throw new runtime.RequiredError('mangaId','Required parameter requestParameters.mangaId was null or undefined when calling addVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPut.');
        }

        if (requestParameters.volumeNum === null || requestParameters.volumeNum === undefined) {
            throw new runtime.RequiredError('volumeNum','Required parameter requestParameters.volumeNum was null or undefined when calling addVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/id/add_vol/{manga_id}/{volume_num}`.replace(`{${"manga_id"}}`, encodeURIComponent(String(requestParameters.mangaId))).replace(`{${"volume_num"}}`, encodeURIComponent(String(requestParameters.volumeNum))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Add Volume To Manga By Id
     */
    async addVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPut(requestParameters: AddVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.addVolumeToMangaByIdMangaIdAddVolMangaIdVolumeNumPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Volume To Manga By Title
     */
    async addVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPutRaw(requestParameters: AddVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaTitle === null || requestParameters.mangaTitle === undefined) {
            throw new runtime.RequiredError('mangaTitle','Required parameter requestParameters.mangaTitle was null or undefined when calling addVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPut.');
        }

        if (requestParameters.volumeNum === null || requestParameters.volumeNum === undefined) {
            throw new runtime.RequiredError('volumeNum','Required parameter requestParameters.volumeNum was null or undefined when calling addVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/title/add_vol/{manga_title}/{volume_num}`.replace(`{${"manga_title"}}`, encodeURIComponent(String(requestParameters.mangaTitle))).replace(`{${"volume_num"}}`, encodeURIComponent(String(requestParameters.volumeNum))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Add Volume To Manga By Title
     */
    async addVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPut(requestParameters: AddVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.addVolumeToMangaByTitleMangaTitleAddVolMangaTitleVolumeNumPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Manga
     */
    async createMangaMangaPostRaw(requestParameters: CreateMangaMangaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.manga === null || requestParameters.manga === undefined) {
            throw new runtime.RequiredError('manga','Required parameter requestParameters.manga was null or undefined when calling createMangaMangaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manga/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MangaToJSON(requestParameters.manga),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Create Manga
     */
    async createMangaMangaPost(requestParameters: CreateMangaMangaPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.createMangaMangaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Mangas
     */
    async getAllMangasMangaGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get All Mangas
     */
    async getAllMangasMangaGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getAllMangasMangaGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Manga By Id
     */
    async getMangaByIdMangaIdMangaIdGetRaw(requestParameters: GetMangaByIdMangaIdMangaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaId === null || requestParameters.mangaId === undefined) {
            throw new runtime.RequiredError('mangaId','Required parameter requestParameters.mangaId was null or undefined when calling getMangaByIdMangaIdMangaIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/id/{manga_id}`.replace(`{${"manga_id"}}`, encodeURIComponent(String(requestParameters.mangaId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Get Manga By Id
     */
    async getMangaByIdMangaIdMangaIdGet(requestParameters: GetMangaByIdMangaIdMangaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.getMangaByIdMangaIdMangaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Manga By Title
     */
    async getMangaByTitleMangaTitleMangaTitleGetRaw(requestParameters: GetMangaByTitleMangaTitleMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Manga>> {
        if (requestParameters.mangaTitle === null || requestParameters.mangaTitle === undefined) {
            throw new runtime.RequiredError('mangaTitle','Required parameter requestParameters.mangaTitle was null or undefined when calling getMangaByTitleMangaTitleMangaTitleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/title/{manga_title}`.replace(`{${"manga_title"}}`, encodeURIComponent(String(requestParameters.mangaTitle))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MangaFromJSON(jsonValue));
    }

    /**
     * Get Manga By Title
     */
    async getMangaByTitleMangaTitleMangaTitleGet(requestParameters: GetMangaByTitleMangaTitleMangaTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Manga> {
        const response = await this.getMangaByTitleMangaTitleMangaTitleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mangas By Author
     */
    async getMangasByAuthorMangaAuthorAuthorNameGetRaw(requestParameters: GetMangasByAuthorMangaAuthorAuthorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        if (requestParameters.authorName === null || requestParameters.authorName === undefined) {
            throw new runtime.RequiredError('authorName','Required parameter requestParameters.authorName was null or undefined when calling getMangasByAuthorMangaAuthorAuthorNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/author/{author_name}`.replace(`{${"author_name"}}`, encodeURIComponent(String(requestParameters.authorName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get Mangas By Author
     */
    async getMangasByAuthorMangaAuthorAuthorNameGet(requestParameters: GetMangasByAuthorMangaAuthorAuthorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getMangasByAuthorMangaAuthorAuthorNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Mangas By Genres
     */
    async getMangasByGenresMangaGenreGenreNameGetRaw(requestParameters: GetMangasByGenresMangaGenreGenreNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Manga>>> {
        if (requestParameters.genreName === null || requestParameters.genreName === undefined) {
            throw new runtime.RequiredError('genreName','Required parameter requestParameters.genreName was null or undefined when calling getMangasByGenresMangaGenreGenreNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manga/genre/{genre_name}`.replace(`{${"genre_name"}}`, encodeURIComponent(String(requestParameters.genreName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MangaFromJSON));
    }

    /**
     * Get Mangas By Genres
     */
    async getMangasByGenresMangaGenreGenreNameGet(requestParameters: GetMangasByGenresMangaGenreGenreNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Manga>> {
        const response = await this.getMangasByGenresMangaGenreGenreNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
